import * as fs from 'fs';
import * as path from 'path';
import * as mc from 'minecraft-protocol';

async function checkServerStatus(host: string, port: number = 25565) {
    let response;

    try {
        // –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–∑–æ–≤ ping
        response = await mc.ping({ host, port, timeout: 10000 }); // —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫
    } catch (error: any) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∏–Ω–≥–µ —Å–µ—Ä–≤–µ—Ä–∞ ${host}:${port}:`, error.message || error);
        return; // –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏/—Ç–∞–π–º–∞—É—Ç
    }

    // üî¥ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ response ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ null
    if (!response || typeof response !== 'object') {
        console.error(`–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ${host}:${port}`);
        return;
    }

    // –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å response
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');

    const logDir = path.join(__dirname, 'logs', `${year}-${month}`);
    if (!fs.existsSync(logDir)) {
        fs.mkdirSync(logDir, { recursive: true });
    }

    const logFile = path.join(logDir, `${day}.log`);
    const timestamp = now.toISOString();
    let logData = `[${timestamp}] –°–µ—Ä–≤–µ—Ä: ${host}:${port}\n`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–æ–∫–∞—Ö
    if ('players' in response && response.players) {
        const online = response.players.online ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const max = response.players.max ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        logData += `–û–Ω–ª–∞–π–Ω: ${online}/${max}\n`;

        if (Array.isArray(response.players.sample) && response.players.sample.length > 0) {
            logData += "–ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω:\n";
            response.players.sample.forEach((player: any) => {
                const name = typeof player.name === 'string' ? player.name : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                logData += `- ${name}\n`;
            });
        } else {
            logData += "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–∞—Ö.\n";
        }
    } else {
        logData += "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∏–≥—Ä–æ–∫–∞—Ö.\n";
    }

    try {
        fs.appendFileSync(logFile, logData + "\n", 'utf8');
        console.log("–î–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–µ—Ä–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤", logFile);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:", error);
    }
}

function addHourlySeparator() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');

    const logDir = path.join(__dirname, 'logs', `${year}-${month}`);
    if (!fs.existsSync(logDir)) {
        fs.mkdirSync(logDir, { recursive: true });
    }

    const logFile = path.join(logDir, `${day}.log`);
    const separator = `\n------------------------------------------------------------------------\n`;
    try {
        fs.appendFileSync(logFile, separator, 'utf8');
        console.log("–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤", logFile);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è:", error);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
setInterval(() => checkServerStatus('birchcraft.hopto.org', 25565), 10 * 1000);

// –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–∞–∂–¥—ã–π —á–∞—Å
setInterval(addHourlySeparator, 60 * 60 * 1000);

// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
checkServerStatus('birchcraft.hopto.org', 25565);