import * as fs from 'fs';
import * as path from 'path';
import * as mc from 'minecraft-protocol';




async function checkServerStatus(host: string, port: number = 25565) {
    console.log(`üîç –ü–∏–Ω–≥—É–µ–º: ${host}:${port}`);

    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º ping –≤ Promise, —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏
    const response = await new Promise<any>((resolve, reject) => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤—Ä—É—á–Ω—É—é
        const timeoutId = setTimeout(() => {
            reject(new Error('Ping timeout: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'));
        }, 10000); // 10 —Å–µ–∫—É–Ω–¥

        // –í—ã–∑—ã–≤–∞–µ–º ping —Å –∫–æ–ª–ª–±—ç–∫–æ–º
        mc.ping(
            { host, port },
            (err: Error | null, data: any) => {
                clearTimeout(timeoutId); // —Å–Ω–∏–º–∞–µ–º —Ç–∞–π–º–∞—É—Ç

                if (err) {
                    reject(err);
                    return;
                }

                if (!data || typeof data !== 'object') {
                    reject(new Error('–ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (null)'));
                    return;
                }

                resolve(data);
            }
        );
    }).catch(err => {
        console.error(`üî¥ –û—à–∏–±–∫–∞ ping:`, err.message || err);
        return null; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –ø—Ä–∏ –æ—à–∏–±–∫–µ
    });

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if (response === null) {
        return;
    }

    // –¢–µ–ø–µ—Ä—å response ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–±—ä–µ–∫—Ç
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');

    const logDir = path.join(__dirname, 'logs', `${year}-${month}`);
    if (!fs.existsSync(logDir)) {
        fs.mkdirSync(logDir, { recursive: true });
    }

    const logFile = path.join(logDir, `${day}.log`);
    const timestamp = now.toISOString();
    let logData = `[${timestamp}] –°–µ—Ä–≤–µ—Ä: ${host}:${port}\n`;

    if ('players' in response && response.players) {
        const online = response.players.online ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const max = response.players.max ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        logData += `–û–Ω–ª–∞–π–Ω: ${online}/${max}\n`;

        if (Array.isArray(response.players.sample) && response.players.sample.length > 0) {
            logData += "–ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω:\n";
            response.players.sample.forEach((player: any) => {
                const name = typeof player.name === 'string' ? player.name : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                logData += `- ${name}\n`;
            });
        } else {
            logData += "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–∞—Ö.\n";
        }
    } else {
        logData += "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∏–≥—Ä–æ–∫–∞—Ö.\n";
    }

    try {
        fs.appendFileSync(logFile, logData + "\n", 'utf8');
        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤", logFile);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:", error);
    }
}

function addHourlySeparator() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');

    const logDir = path.join(__dirname, 'logs', `${year}-${month}`);
    if (!fs.existsSync(logDir)) {
        fs.mkdirSync(logDir, { recursive: true });
    }

    const logFile = path.join(logDir, `${day}.log`);
    const separator = `\n------------------------------------------------------------------------\n`;
    try {
        fs.appendFileSync(logFile, separator, 'utf8');
        console.log("–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤", logFile);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è:", error);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
setInterval(() => checkServerStatus('birchcraft.hopto.org', 25565), 10 * 1000);

// –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–∞–∂–¥—ã–π —á–∞—Å
setInterval(addHourlySeparator, 60 * 60 * 1000);

// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
checkServerStatus('birchcraft.hopto.org', 25565);