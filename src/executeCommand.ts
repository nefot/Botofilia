import {Bot} from 'mineflayer';
import {Logger} from './logger';
import {createBot} from 'mineflayer'
import {pathfinder, Movements, goals} from 'mineflayer-pathfinder'

const {GoalBlock} = goals

type CommandHandler = (args: string[], logger: Logger, bot: Bot) => Promise<void>;

//:todo –ò–°–ü–†–ê–í–ò–¢–¨ move
//:todo –°–î–ï–õ–ê–¢–¨ –¢–ï–°–¢–´

const commandHandlers: Record<string, CommandHandler> = {
    async chat(args, logger, bot) {
        const message = args.join(' ');
        if (!message) {
            logger.logEvent('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã chat –ø—É—Å—Ç–æ–µ.');
            return;
        }
        bot.chat(message);
        logger.logEvent(`–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message}`);
    },

    async inventory(_, logger, bot) {
        logger.logEvent('–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –±–æ—Ç–∞: ' + JSON.stringify(bot.inventory.items()));
    },

    async online(_, logger, bot) {
        logger.logEvent('–ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω: ' + Object.keys(bot.players).join(', '));
    },
    async move(args, logger, bot) {
        if (args.length < 3) {
            logger.logEvent('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã move. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: move <x> <y> <z> [track]');
            return;
        }

        const x = parseFloat(args[0]);
        const y = parseFloat(args[1]);
        const z = parseFloat(args[2]);
        const trackPosition = args.includes('track');

        if (isNaN(x) || isNaN(y) || isNaN(z)) {
            logger.logEvent('–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã move. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã —á–∏—Å–ª–∞.');
            return;
        }

        logger.logEvent(`–ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º x:${x} y:${y} z:${z}`);


        bot.loadPlugin(pathfinder)
        const defaultMovements = new Movements(bot)
        bot.pathfinder.setMovements(defaultMovements)
        const goal = new GoalBlock(x, y, z)
        bot.pathfinder.goto(goal).then(() => {
            bot.chat('–ü—Ä–∏–±—ã–ª –≤ —Ç–æ—á–∫—É!')
        }).catch(err => {
            bot.chat(`–û—à–∏–±–∫–∞: ${err.message}`)
        })

        if (trackPosition) {
            const interval = setInterval(() => {
                const position = bot.entity.position;
                console.log(`\x1b[34m–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: x:${position.x.toFixed(2)} y:${position.y.toFixed(2)} z:${position.z.toFixed(2)}\x1b[0m`);
            }, 5000);

            bot.once('goal_reached', () => {
                clearInterval(interval);
                logger.logEvent('–ë–æ—Ç –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏.');
            });

            bot.once('path_reset', () => {
                clearInterval(interval);
                logger.logEvent('–ü—É—Ç—å —Å–±—Ä–æ—à–µ–Ω. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
            });
        }
    },

    async health(args, logger, bot) {
        const healthHearts = Math.round(bot.health / 2);
        const foodIcons = Math.round(bot.food / 2);
        const exp = bot.experience.level + bot.experience.progress;
        const healthBar = '‚ô•'.repeat(healthHearts) + '‚ô°'.repeat(10 - healthHearts);
        const foodBar = 'üçó'.repeat(foodIcons) + '‚ä†'.repeat(10 - foodIcons);
        const statusGraphical = `Health: ${healthBar}\nFood: ${foodBar}\nExp: ${exp.toFixed(1)}`;
        const statusText = `Health: ${bot.health}/20, Food: ${bot.food}/20, Exp: ${exp.toFixed(1)}`;
        const output = args.includes('simple') ? statusText : statusGraphical;

        if (args.includes('log')) {
            logger.logEvent(output);
        } else {
            console.log(output);
        }
    },

    async say(args, logger, bot) {
        const message = args.join(' ');

        if (!message) {
            logger.logEvent('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã say –ø—É—Å—Ç–æ–µ.');
            return;
        }

        bot.chat(message);
        logger.logEvent(`–ë–æ—Ç —Å–∫–∞–∑–∞–ª: ${message}`);
    },

    async exit(_, logger, bot) {
        logger.logEvent('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
        bot.end();
        process.exit(0);
    },
};

export async function executeCommand(command: string, logger: Logger, bot: Bot): Promise<void> {
    try {
        const [cmd, ...args] = command.split(' ');
        const handler = commandHandlers[cmd];

        if (!handler) {
            logger.logEvent('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.');
            return;
        }

        await handler(args, logger, bot);
        logger.logEvent(`–ö–æ–º–∞–Ω–¥–∞ '${cmd}' —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.`);
    } catch (err) {
        logger.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${err}`);
    }
}
