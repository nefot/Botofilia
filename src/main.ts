import { createBot, Bot, BotOptions } from 'mineflayer';
import WebSocket from 'ws';
import { Logger } from './logger';

const args: string[] = process.argv.slice(2);
if (args.length < 3) {
  console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node main.ts <–Ω–∏–∫–Ω–µ–π–º> <–ø–∞—Ä–æ–ª—å> <–∞–¥—Ä–µ—Å> [–ø–æ—Ä—Ç]');
  process.exit(1);
}

const [username, password, host, port] = args;
const botOptions: BotOptions = {
  host,
  port: port ? parseInt(port) : 25565,
  username,
  password,
  version: '1.21.4',
};

const logger = new Logger(username); // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä —Å –∏–º–µ–Ω–µ–º –±–æ—Ç–∞

let bot: Bot;
const ws = new WebSocket('ws://localhost:8080');

ws.on('open', () => {
  logger.logEvent(`–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É –∫–æ–º–∞–Ω–¥.`);
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  ws.send(`${username} register`);
});

ws.on('message', (data: WebSocket.RawData) => {
  try {
    const message = data.toString().trim();

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "–û—à–∏–±–∫–∞:"
    if (message.startsWith('–û—à–∏–±–∫–∞:')) {
      logger.error(`–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: ${message}`);
      return;
    }

    executeCommand(message);
  } catch (err) {
    logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: ${err}`);
  }
});

ws.on('close', () => {
  logger.logEvent(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∫–æ–º–∞–Ω–¥ –∑–∞–∫—Ä—ã—Ç–æ.`);
});

ws.on('error', (err) => {
  logger.error(`–û—à–∏–±–∫–∞ WebSocket: ${err}`);
});

function createBotInstance(): void {
  bot = createBot(botOptions);

  bot.on('login', () => {
    bot.chat(`/login ${password}`);
    // logger.logEvent(`–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É ${host}:${port || 25565}`);
  });

  bot.on('error', (err) => {
    // logger.error(`–û—à–∏–±–∫–∞: ${err}`);
  });

  bot.on('end', (reason) => {
    // logger.logEvent(`–ë–æ—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${reason}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...`);
    setTimeout(createBotInstance, 5000);
  });

  bot.on('kicked', (reason) => {
    // logger.error(`–ë–æ—Ç –∫–∏–∫–Ω—É—Ç: ${reason}`);
  });

  bot.on('messagestr', (message: string) => {
    // –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
    const match = message.match(/<([^>]+)> (.+)/);
    if (match) {
      const [, player, msg] = match;
      logger.logMessage(player, msg); // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞
    } else {
      logger.logEvent(message); // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –∏–≥—Ä–æ–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ —Å–æ–±—ã—Ç–∏–µ
    }
  });

  bot.on('playerJoined', (player) => {
    console.log(`\x1b[33m–∏–≥—Ä–æ–∫ ${player.username} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∏–≥—Ä–µ\x1b[0m`);
    logger.logEvent(`–∏–≥—Ä–æ–∫ ${player.username} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∏–≥—Ä–µ`);
  });


  bot.on('playerLeft', (player) => {
    logger.logEvent(`–∏–≥—Ä–æ–∫ ${player.username} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É`);
  });
}

async function executeCommand(command: string): Promise<void> {
  try {
    const [cmd, ...args] = command.split(' ');

    switch (cmd) {
      case 'chat':
        bot.chat(args.join(' '));
        break;

      case 'inventory':
        logger.logEvent('–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –±–æ—Ç–∞: ' + JSON.stringify(bot.inventory.items()));
        break;

      case 'online':
        logger.logEvent('–ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω: ' + Object.keys(bot.players).join(', '));
        break;

      case 'health': {
        const healthHearts = Math.round(bot.health / 2);
        const foodIcons = Math.round(bot.food / 2);
        const exp = bot.experience.level + bot.experience.progress;

        const healthBar = '‚ô•'.repeat(healthHearts) + '‚ô°'.repeat(10 - healthHearts);
        const foodBar = 'üçó'.repeat(foodIcons) + '‚ä†'.repeat(10 - foodIcons);
        const statusGraphical = `Health: ${healthBar}\nFood: ${foodBar}\nExp: ${exp.toFixed(1)}`;
        const statusText = `Health: ${bot.health}/20, Food: ${bot.food}/20, Exp: ${exp.toFixed(1)}`;

        const output = args.includes('log')
          ? args.includes('simple') ? statusText : statusGraphical
          : args.includes('simple') ? statusText : statusGraphical;

        if (args.includes('log')) {
          logger.logEvent(output);
        } else {
          console.log(output);
        }
        break;
      }

      case 'say':
        const message = args.join(' ');
        logger.logMessage(username, message);
        bot.chat(message);
        break;

      case 'exit':
        logger.logEvent('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
        bot.end();
        process.exit(0);

      default:
        logger.logEvent('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.');
    }
  } catch (err) {
    logger.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${err}`);
  }
}


createBotInstance();